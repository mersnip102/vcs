
import { ActivatedRoute, Router } from '@angular/router';
import { TT01DataDTO } from 'src/app/models/tt01DTO/tt01DataDto.model';
import { LocalStorageService } from 'src/app/shared/local-storage/local-storage.service';
import { reportAPI } from 'src/environments/environment.prod';

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, BehaviorSubject, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';


export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');
export interface IClient {
  apiV1ReportsR1(reportCode: string, jsonCompress: string | null | undefined): Observable<FileResponse>;
  apiV1ReportsR1SampleGet(reportCode: string, jsonCompress: string | null | undefined): Observable<OperationResultInfoOfByteOf>;
  apiV1ReportsR1SamplePost(reportCode: string, jsonCompress: string): Observable<OperationResultInfoOfByteOf>;
  apiV1ReportsR1SampleUnauthorized(reportCode: string, dataJSON: any): Observable<OperationResultInfoOfByteOf>;
  apiV1ReportsR1Data(reportCode: string, jsonCompress: string | null | undefined): Observable<OperationResultInfoOfString>;
  apiV1ReportsR1DataUnauthorized(reportCode: string, dataJSON: any): Observable<OperationResultInfoOfString>;
  apiV1ReportsR1SampleData(reportCode: string): Observable<OperationResultInfoOfString>;
  apiV1ReportsR1On(): Observable<FileResponse>;
  apiV1ReportsR1Ondb(): Observable<FileResponse>;
  apiV1ReportsR1Onerror(): Observable<FileResponse>;
  apiV1ReportsR1Onnocontent(): Observable<FileResponse>;
}

// export class ProxiesService {
  

//   private readonly apiUrl = reportAPI.apiUrl; // URL API được lấy từ environment

//   // private readonly apiUrl = 'http://localhost:3000';
//   private readonly accessTokenKey = 'accessToken'; 
//   private readonly refreshTokenKey = 'encryptedAccessToken';
//   roleUser: Observable<number>;
//   //role-number
//   roleUserSubject: BehaviorSubject<number> = new BehaviorSubject<number>(2);
//   // roleUserSubject!: BehaviorSubject<number>

//   constructor( private router: Router, private http: HttpClient, private route: ActivatedRoute, private localStoreService: LocalStorageService) {
//     // if(this.localStoreService.getLocalStorageItemAsJSON(this.accessTokenKey) !== null) {
//     this.roleUser = this.roleUserSubject.asObservable();
    
//   }

//   setValueRole(value: number) {
//     console.log(value)
//     this.roleUserSubject.next(value);
//   }


//   getDataChartFromDatabase(PrintObjectID: string, TuNgay?: string, DenNgay?: string): Observable<any> {
//     const query = {
//       "PrintObjectID" : PrintObjectID, // giống reportCode
//       "PeriodOfTime2": TuNgay && DenNgay ? {
//         "TuNgay": TuNgay,
//         "DenNgay": DenNgay,
//         "PeriodType": "DD"
//       } : {}
//     }
    
//     return this.http.post<TT01DataDTO>(`${this.apiUrl}/r1/${PrintObjectID}/data/unauthorized`, query,{
//       headers: {
//         "Content-Type": "application/json"
//       }, responseType: 'json'
      
//     },)

//   }

  

//   getRoleUser(userId: any): Observable<any> {
   
//     return this.http.get(`${this.apiUrl}/services/app/Role/GetRoleByUserId?userId=${userId}`, {responseType: 'json'});
//   }

//   getToken(): any {
//     return localStorage.getItem(this.accessTokenKey);
//   }

//   setToken(token: string): void {
//     localStorage.setItem(this.accessTokenKey, token);
//   }

//   getRefreshToken(): any {
//     return localStorage.getItem(this.refreshTokenKey);
//   }

//   setRefreshToken(token: string): void {
//     localStorage.setItem(this.refreshTokenKey, token);
//   }

//   isUserAuthenticated(): boolean {
//     const token = this.getToken();
//     // kiểm tra xem token có tồn tại hay không
//     return !!token;
//   }

//   refreshToken(): Observable<any> {
//     const refreshToken = this.getRefreshToken();
//     return this.http.post(`${this.apiUrl}/refreshToken`, { refresh_token: refreshToken })
//     // .pipe(
//     //   tap((tokens: any) => { //tap là 1 operator của rxjs nó sẽ thực hiện 1 hành động nào đó khi observable được gọi 
//     //     // this.setToken(tokens.access_token); 
//     //     // this.setRefreshToken(tokens.refresh_token);
//     //     this.localStoreService.setLocalStorageItem(this.accessTokenKey, tokens.accessToken);
//     //     this.localStoreService.setLocalStorageItem(this.refreshTokenKey, tokens.refreshToken);
//     //   })
//     // );
//   }

//   logout() {
//     this.setValueRole(4);
//     localStorage.removeItem(this.accessTokenKey);
//     localStorage.removeItem(this.refreshTokenKey);

//     this.router.navigateByUrl('/auth/login');
    
    
//   }
// }

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming


@Injectable({
    providedIn: 'root'
})
export class Client implements IClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://192.168.1.10:3032";
    }

    apiV1ReportsR1(reportCode: string, jsonCompress: string | null | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/v1/reports/r1/{reportCode}?";
        if (reportCode === undefined || reportCode === null)
            throw new Error("The parameter 'reportCode' must be defined.");
        url_ = url_.replace("{reportCode}", encodeURIComponent("" + reportCode));
        if (jsonCompress !== undefined && jsonCompress !== null)
            url_ += "jsonCompress=" + encodeURIComponent("" + jsonCompress) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream",
                "Authorization": "Bearer " + localStorage.getItem("stoken")
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiV1ReportsR1(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiV1ReportsR1(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processApiV1ReportsR1(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    apiV1ReportsR1SampleGet(reportCode: string, jsonCompress: string | null | undefined): Observable<OperationResultInfoOfByteOf> {
        let url_ = this.baseUrl + "/api/v1/reports/r1/{reportCode}/sample?";
        if (reportCode === undefined || reportCode === null)
            throw new Error("The parameter 'reportCode' must be defined.");
        url_ = url_.replace("{reportCode}", encodeURIComponent("" + reportCode));
        if (jsonCompress !== undefined && jsonCompress !== null)
            url_ += "jsonCompress=" + encodeURIComponent("" + jsonCompress) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
                "Authorization": "Bearer " + localStorage.getItem("stoken")
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiV1ReportsR1SampleGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiV1ReportsR1SampleGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OperationResultInfoOfByteOf>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OperationResultInfoOfByteOf>;
        }));
    }

    protected processApiV1ReportsR1SampleGet(response: HttpResponseBase): Observable<OperationResultInfoOfByteOf> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OperationResultInfoOfByteOf.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    apiV1ReportsR1SamplePost(reportCode: string, jsonCompress: string): Observable<OperationResultInfoOfByteOf> {
        let url_ = this.baseUrl + "/api/v1/reports/r1/{reportCode}/sample";
        if (reportCode === undefined || reportCode === null)
            throw new Error("The parameter 'reportCode' must be defined.");
        url_ = url_.replace("{reportCode}", encodeURIComponent("" + reportCode));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(jsonCompress);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": "Bearer " + localStorage.getItem("stoken")
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiV1ReportsR1SamplePost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiV1ReportsR1SamplePost(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OperationResultInfoOfByteOf>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OperationResultInfoOfByteOf>;
        }));
    }

    protected processApiV1ReportsR1SamplePost(response: HttpResponseBase): Observable<OperationResultInfoOfByteOf> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OperationResultInfoOfByteOf.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    apiV1ReportsR1SampleUnauthorized(reportCode: string, dataJSON: any): Observable<OperationResultInfoOfByteOf> {
        let url_ = this.baseUrl + "/api/v1/reports/r1/{reportCode}/sample/unauthorized";
        if (reportCode === undefined || reportCode === null)
            throw new Error("The parameter 'reportCode' must be defined.");
        url_ = url_.replace("{reportCode}", encodeURIComponent("" + reportCode));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dataJSON);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": "Bearer " + localStorage.getItem("stoken")
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiV1ReportsR1SampleUnauthorized(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiV1ReportsR1SampleUnauthorized(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OperationResultInfoOfByteOf>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OperationResultInfoOfByteOf>;
        }));
    }

    protected processApiV1ReportsR1SampleUnauthorized(response: HttpResponseBase): Observable<OperationResultInfoOfByteOf> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OperationResultInfoOfByteOf.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    apiV1ReportsR1Data(reportCode: string, jsonCompress: string | null | undefined): Observable<OperationResultInfoOfString> {
        let url_ = this.baseUrl + "/api/v1/reports/r1/{reportCode}/data?";
        if (reportCode === undefined || reportCode === null)
            throw new Error("The parameter 'reportCode' must be defined.");
        url_ = url_.replace("{reportCode}", encodeURIComponent("" + reportCode));
        if (jsonCompress !== undefined && jsonCompress !== null)
            url_ += "jsonCompress=" + encodeURIComponent("" + jsonCompress) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
                "Authorization": "Bearer " + localStorage.getItem("stoken")?.toString
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiV1ReportsR1Data(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiV1ReportsR1Data(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OperationResultInfoOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OperationResultInfoOfString>;
        }));
    }

    protected processApiV1ReportsR1Data(response: HttpResponseBase): Observable<OperationResultInfoOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OperationResultInfoOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    apiV1ReportsR1DataUnauthorized(reportCode: string, dataJSON: any): Observable<OperationResultInfoOfString> {
        let url_ = this.baseUrl + "/api/v1/reports/r1/{reportCode}/data";
        if (reportCode === undefined || reportCode === null)
            throw new Error("The parameter 'reportCode' must be defined.");
        url_ = url_.replace("{reportCode}", encodeURIComponent("" + reportCode));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dataJSON);
      

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json",
                
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiV1ReportsR1DataUnauthorized(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiV1ReportsR1DataUnauthorized(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OperationResultInfoOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OperationResultInfoOfString>;
        }));
    }

    protected processApiV1ReportsR1DataUnauthorized(response: HttpResponseBase): Observable<OperationResultInfoOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OperationResultInfoOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    apiV1ReportsR1SampleData(reportCode: string): Observable<OperationResultInfoOfString> {
        let url_ = this.baseUrl + "/api/v1/reports/r1/{reportCode}/sample/data";
        if (reportCode === undefined || reportCode === null)
            throw new Error("The parameter 'reportCode' must be defined.");
        url_ = url_.replace("{reportCode}", encodeURIComponent("" + reportCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
                "Authorization": "Bearer " + localStorage.getItem("stoken")
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiV1ReportsR1SampleData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiV1ReportsR1SampleData(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OperationResultInfoOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OperationResultInfoOfString>;
        }));
    }

    protected processApiV1ReportsR1SampleData(response: HttpResponseBase): Observable<OperationResultInfoOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OperationResultInfoOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    apiV1ReportsR1On(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/v1/reports/r1/on";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream",
                "Authorization": "Bearer " + localStorage.getItem("stoken")
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiV1ReportsR1On(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiV1ReportsR1On(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processApiV1ReportsR1On(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    apiV1ReportsR1Ondb(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/v1/reports/r1/ondb";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream",
                "Authorization": "Bearer " + localStorage.getItem("stoken")
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiV1ReportsR1Ondb(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiV1ReportsR1Ondb(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processApiV1ReportsR1Ondb(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    apiV1ReportsR1Onerror(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/v1/reports/r1/onerror";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream",
                "Authorization": "Bearer " + localStorage.getItem("stoken")
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiV1ReportsR1Onerror(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiV1ReportsR1Onerror(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processApiV1ReportsR1Onerror(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    apiV1ReportsR1Onnocontent(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/v1/reports/r1/onnocontent";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream",
                "Authorization": "Bearer " + localStorage.getItem("stoken")
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiV1ReportsR1Onnocontent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiV1ReportsR1Onnocontent(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processApiV1ReportsR1Onnocontent(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class OperationInfo implements IOperationInfo {
    isSuccess?: boolean;
    infoCode?: string | undefined;
    infoMessage?: string | undefined;
    infoDescription?: string | undefined;
    userName?: string | undefined;
    createDate?: Date;

    constructor(data?: IOperationInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.infoCode = _data["infoCode"];
            this.infoMessage = _data["infoMessage"];
            this.infoDescription = _data["infoDescription"];
            this.userName = _data["userName"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OperationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new OperationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["infoCode"] = this.infoCode;
        data["infoMessage"] = this.infoMessage;
        data["infoDescription"] = this.infoDescription;
        data["userName"] = this.userName;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IOperationInfo {
    isSuccess?: boolean;
    infoCode?: string | undefined;
    infoMessage?: string | undefined;
    infoDescription?: string | undefined;
    userName?: string | undefined;
    createDate?: Date;
}

export class OperationResultInfoOfByteOf extends OperationInfo implements IOperationResultInfoOfByteOf {
    result?: string | undefined;

    constructor(data?: IOperationResultInfoOfByteOf) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.result = _data["result"];
        }
    }

    static override fromJS(data: any): OperationResultInfoOfByteOf {
        data = typeof data === 'object' ? data : {};
        let result = new OperationResultInfoOfByteOf();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        super.toJSON(data);
        return data;
    }
}

export interface IOperationResultInfoOfByteOf extends IOperationInfo {
    result?: string | undefined;
}

export class OperationResultInfoOfString extends OperationInfo implements IOperationResultInfoOfString {
    result?: string | undefined;

    constructor(data?: IOperationResultInfoOfString) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.result = _data["result"];
        }
    }

    static override fromJS(data: any): OperationResultInfoOfString {
        data = typeof data === 'object' ? data : {};
        let result = new OperationResultInfoOfString();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        super.toJSON(data);
        return data;
    }
}

export interface IOperationResultInfoOfString extends IOperationInfo {
    result?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}

